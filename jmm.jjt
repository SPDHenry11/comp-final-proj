options{
    LOOKAHEAD=1;
}

PARSER_BEGIN(jmm)

import java.nio.file.Files;
import java.nio.file.Paths;

public class jmm{

    static final String USAGE =
    "Usage:" +
    "\tjava jmm [-r=<num>] [-o] <input_file.jmm>\n" +
    "\tjava â€“jar jmm.jar [-r=<num>] [-o] <input_file.jmm>";

    public static void main(String[] args){
        try{
            if(args.length < 1){
                System.out.println(USAGE);
                return;
            }
            String code = new String(Files.readAllBytes(Paths.get(args[0])));
            jmm parser = new jmm();
            SimpleNode root = parser.Program();
            root.dump("");
        } catch(Exception e){
            e.printStackTrace();
        }
        
    }

}

PARSER_END(jmm)

SKIP: {" "}
SKIP: {"\t"}
SKIP: {"\n"}
SKIP: {"\r"}

SKIP: {<"//">:SINGLE_LINE_COMMENT}
<SINGLE_LINE_COMMENT> SKIP: {"\n" :DEFAULT}
<SINGLE_LINE_COMMENT> SKIP: {"\r" :DEFAULT}

SKIP: {<"/*"> : MULTI_LINE_COMMENT}
<MULTI_LINE_COMMENT> SKIP: { "*/" : DEFAULT}

TOKEN:{<INTEGER:(["0"-"9"])+>}
TOKEN: {"!"}
TOKEN: {"&&"}
TOKEN: {"("}
TOKEN: {")"}
TOKEN: {"*"}
TOKEN: {"+"}
TOKEN: {","}
TOKEN: {"-"}
TOKEN: {"/"}
TOKEN: {";"}
TOKEN: {"<"}
TOKEN: {"="}
TOKEN: {"String"}
TOKEN: {"["}
TOKEN: {"]"}
TOKEN: {<BOOLEAN:"boolean">}
TOKEN: {"class"}
TOKEN: {"else"}
TOKEN: {"extends"}
TOKEN: {<FALSE:"false">}
TOKEN: {<TRUE:"true">}
TOKEN: {"if"}
TOKEN: {"import"}
TOKEN: {<INT:"int">}
TOKEN: {"length"}
TOKEN: {"main"}
TOKEN: {"new"}
TOKEN: {"public"}
TOKEN: {"return"}
TOKEN: {"static"}
TOKEN: {<THIS:"this">}

TOKEN: {"void"}
TOKEN: {"while"}
TOKEN: {"{"}
TOKEN: {"}"}
TOKEN:{<IDENTIFIER: ["_", "$", "a"-"z", "A"-"Z"] (["_", "$", "0"-"9", "a"-"z", "A"-"Z"])*>}

SimpleNode Program()#PROG:{}{
    ImportDeclaration()
    ClassDeclaration()
    <EOF>
    {return jjtThis;}
}

void ImportDeclaration()#IMPORT:{}{
    "import" ("static")? Identifier() (MemberOperation() Identifier())*
    ("(" ((Type() ("," Type())*) | "void")? ")")?
    ("void" | Type())? ";"
}

void ClassDeclaration()#CLASS:{}{
    "class" Identifier() ("extends" Identifier())? "{"
        (VarDeclaration())*
        (MethodDeclaration())*
    "}"
}

void VarDeclaration()#VAR:{}{
    Type() Identifier() ";"
}

void MethodDeclaration()#METHOD:{}{
    "public"(
        ("static" "void" "main"
        "(" "String" "[" "]" Identifier() ")" "{"
            (LOOKAHEAD(2) VarDeclaration())*
            (Statement())*
        "}") |
        (Type() Identifier() "(" (Parameter())* ")" "{"
            (LOOKAHEAD(2) VarDeclaration())*
            (Statement())*
            Return()
        "}")
    )
}

void Return()#RETURN:{}{
    "return" Expression() ";"
}

void Parameter()#PARAM:{}{
    (",")? Type() Identifier()
}

void Type() #TYPE:{Token t;}{
    (t = <INT> (Array())?) | t = <BOOLEAN> | t = <IDENTIFIER>
    {jjtThis.value = t.image;}
}

void Array()#ARRAY:{}{
    "[" "]"
}

void Statement():{}{
    BlockStatement() |
    IfStatement() |
    WhileStatement() |
    //LOOKAHEAD(2)
    ExpressionStatement()
}

void BlockStatement()#BLOCK:{}{
    "{" (Statement())* "}"
}

void IfStatement()#IF:{}{
    "if" "(" Expression() ")" Statement() ElseStatement()
}

void ElseStatement()#ELSE:{}{
    "else" Statement()
}

void WhileStatement()#WHILE:{}{
    "while" "(" Expression() ")" Statement()
}

void AssignementStatement()#ASSIGN:{}{
    Identifier() (SubscriptOperation())? "=" Expression() ";"
}

void ExpressionStatement()#STATEMENT:{}{
    Expression() ";"
}

/*
void Expression():{}{
    (Expression() ("&&" | "<" |"+" |"-" |"*" |"/") Expression()) |
    (Expression() "[" Expression() "]") |
    (Expression() "." "length") |
    (Expression() "." Identifier() "(" (Expression() ("," Expression())* )? ")") |
    IntegerLiteral() |
    "true" |
    "false" |
    Identifier() |
    "this" |
    ("new" "int" "[" Expression() "]") |
    ("new" Identifier() "(" ")") |
    ("!" Expression()) |
    ("(" Expression() ")")
}
*/

/*
expression ::= equality-expression
equality-expression ::= additive-expression ( ( '==' | '!=' ) additive-expression ) *
additive-expression ::= multiplicative-expression ( ( '+' | '-' ) multiplicative-expression ) *
multiplicative-expression ::= primary ( ( '*' | '/' ) primary ) *
primary ::= '(' expression ')' | NUMBER | VARIABLE | '-' primary
*/

void Precedence0():{}{
    IntegerLiteral() |
    BooleanLiteral() |
    Identifier() |
    ThisKeyword() |
    Instantiation() |
    "(" Expression() ")"
}

void Precedence1():{}{
    Precedence0() (CallOperation() | SubscriptOperation())*
}

void Precedence2():{}{
    //(NewOperation())?
    Precedence1()
}

void Precedence3():{}{
    Precedence2() (MemberOperation())*
}

void Precedence4():{}{
    (NotOperation())* Precedence3()
}

void Precedence5():{}{
    Precedence4() (MultOperation() | DivOperation())*
}

void Precedence6():{}{
    Precedence5() (AddOperation() | SubOperation())*
}

void Precedence7():{}{
    Precedence6() (LessThanOperation())*
}

void Precedence8():{}{
    Precedence7() (AndOperation())*
}

void Precedence9():{}{
    Precedence8() (AssignOperation())?
}

void Expression():{}{
    Precedence9()
}

void AssignOperation()#ASSIGN:{}{
    "=" Precedence8()
}

void AddOperation()#ADD:{}{
    "+" Precedence5()
}

void SubOperation()#SUB:{}{
    "-" Precedence5()
}

void MultOperation()#MULT:{}{
    "*" Precedence4()
}

void DivOperation()#DIV:{}{
    "/" Precedence4()
}

void AndOperation()#AND:{}{
    "&&" Precedence7()
}

void LessThanOperation()#LESS:{}{
    "<" Precedence6()
}

void NotOperation()#NOT:{}{
    "!"
}

void SubscriptOperation()#SUBSCRIPT:{}{
    "[" Expression() "]"
}

void MemberOperation()#MEMBER:{}{
    "." (LengthKeyword()| Precedence2())
}

void CallOperation()#CALL:{}{
    "(" (Parameter())* ")"
}

void Instantiation()#NEW:{Token t;}{
    "new" ((t = <INT> SubscriptOperation()) | (t = <IDENTIFIER> CallOperation()))
    {jjtThis.value = t.image;}
}

void Identifier()#ID:{Token t;}{
    t = <IDENTIFIER>
    {jjtThis.value = t.image;}
}

void BooleanLiteral()#BOOL:{Token t;}{
    t = <TRUE> | <FALSE>
    {jjtThis.value = t.image;}
}

void IntegerLiteral()#INT:{Token t;}{
    t = <INTEGER>
    {jjtThis.value = t.image;}
}

void ThisKeyword() #THIS:{}{
    "this"
}

void LengthKeyword()#LENGTH:{}{
    "length"
}